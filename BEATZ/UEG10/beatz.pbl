
define Start (params) {

	# globals
	gVideoWidth <- 1440
	gVideoHeight <- 900
	gWindowCenterX <- gVideoWidth/2
	gWindowCenterY <- gVideoHeight/2
	gSleepEasy <- 1

	#colors
	gColorRed <- MakeColor("red")
	gColorBlue <- MakeColor("blue")
	gColorGreen <- MakeColor("green")
	gColorWhite <- MakeColor("white")
	gColorBlack <- MakeColor("black")

	# text and fonts
	gTextSize <- 18
	gTextSizeBig <- 24
	gFontWhite <- MakeFont(gPEBLBaseFont, 1, gTextSize, gColorWhite, gColorBlack, 0)
	gFontWhiteBig <- MakeFont(gPEBLBaseFont, 1, gTextSizeBig, gColorWhite, gColorBlack, 0)
	gFontResults <- MakeFont("VeraMono.ttf", 1, gTextSize, gColorWhite, gColorBlack, 0)

	# symbols and stimuli
	gSymbolSize <- 100
	gReferenceStimuli <- Square(gWindowCenterX, gWindowCenterY, gSymbolSize, gColorRed, 1)
	gReferenceTestStimuli <- Ellipse(gWindowCenterX, gWindowCenterY, gSymbolSize, gSymbolSize/2, gColorGreen, 1)

	gListOfStimuli <- [
		Circle(gWindowCenterX, gWindowCenterY, gSymbolSize/2, gColorRed, 1),
		Square(gWindowCenterX, gWindowCenterY, gSymbolSize, gColorGreen, 1),
		gReferenceStimuli,
		Rectangle(gWindowCenterX, gWindowCenterY, gSymbolSize,gSymbolSize/2, gColorBlue, 1),
		Ellipse(gWindowCenterX, gWindowCenterY, gSymbolSize/2,gSymbolSize, gColorBlue, 1)
	]

	gCORRECT_KEY <- " "

	gSlowSound <- LoadSound("slow.wav")
  	gFastSound <- LoadSound("fast.wav")

	gWaitTime <- 150
  	gMaxWaitTime <- 1000
  	gTimesToRepeatList <- 5

  	#####
  	# Main part of experiment
  	#####

	
    gWin <- MakeWindow("black")
	gSubNum <- GetSubNum(gWin)
	
    # draws intro
    DrawIntro()
    WaitForKeyPress("<return>")

	#test
	Test()
	ShowExperimentScreen()
	
	
	# main experiment
	DetermineGroup(RandomDiscrete(2))

	# quits the app
	ShowEndScreen()
	WaitForKeyPress("<esc>")
}

define Test() {
	ShowReadyScreen()
	Main(3, gListOfStimuli,gReferenceTestStimuli)
}

# randomize phases
define DetermineGroup(number) {
	if (number == 1) {
		PhaseA()
		PhaseB()
	} else {
		PhaseB()
		PhaseA()
	}
	
}

define ShowExperimentScreen(){
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	label <- MakeLabel("Experiment startet jetzt? (Drücke <ENTER>)", gFontWhiteBig)
	Move(label, gWindowCenterX, gWindowCenterY)
	AddObject(bg, gWin)
	AddObject(label, gWin)
	Draw()
	WaitForKeyPress("<return>")
}

# shows the screen before experiment phase starts
define ShowReadyScreen() {
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	label <- MakeLabel("Bist du bereit? (Drücke <ENTER>)", gFontWhiteBig)
	Move(label, gWindowCenterX, gWindowCenterY)
	AddObject(bg, gWin)
	AddObject(label, gWin)
	Draw()
	WaitForKeyPress("<return>")
}

# shows the endscreen
define ShowEndScreen() {
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	resultWidth <- gVideoWidth / 1.5
	resultHeight <- gVideoHeight / 1.2

	responseReferenceSlow <- Nth(gResultReferenceSlow, 1)
	accuracyReferenceSlow <- Nth(gResultReferenceSlow, 2)

	responseSlow <- Nth(gResultSlow, 1)
	accuracySlow <- Nth(gResultSlow, 2)

	responseReferenceFast <- Nth(gResultReferenceFast, 1)
	accuracyReferenceFast <- Nth(gResultReferenceFast, 2)

	responseFast <- Nth(gResultFast, 1)
	accuracyFast <- Nth(gResultFast, 2)

	
r1 <- ToInteger(Mean(responseReferenceSlow))
r2 <- ToInteger(Mean(responseSlow))
r3 <- ToInteger(Mean(responseReferenceFast))
r4 <- ToInteger(Mean(responseFast))

rSD1 <- StdDev(responseReferenceSlow)
rSD2 <- StdDev(responseSlow)
rSD3 <- StdDev(responseReferenceFast)
rSD4 <- StdDev(responseFast)

rmin1 <- ToInteger(Min(responseReferenceSlow))
rmin2 <- ToInteger(Min(responseSlow))
rmin3 <- ToInteger(Min(responseReferenceFast))
rmin4 <- ToInteger(Min(responseFast))

rmax1 <- ToInteger(Max(responseReferenceSlow))
rmax2 <- ToInteger(Max(responseSlow))
rmax3 <- ToInteger(Max(responseReferenceFast))
rmax4 <- ToInteger(Max(responseFast))

responseErg <- "
Referenz (Langsam):  " + ToString(responseReferenceSlow) + "
Langsam:             " + ToString(responseSlow) + "
Referenz (Schnell):  " + ToString(responseReferenceFast) + "
Schnell:             " + ToString(responseFast) + "
"

responseText <- "

Antwortzeiten in Millisekunden
|---------------------------------------------------------
|  Durchlauf          | Durchschnitt / Standardabweichung
|---------------------------------------------------------
|  Referenz (Langsam) | " + r1 + "ms / " + rSD1 + "
|  Langsam            | " + r2 + "ms / " + rSD2 + "
|  Referenz (Schnell) | " + r3 + "ms / " + rSD3 + "
|  Schnell            | " + r4 + "ms / " + rSD4 + "
|---------------------------------------------------------

|-----------------------------------
|  Durchlauf          | Min / Max
|-----------------------------------
|  Referenz (Langsam) | " + rmin1 + "ms / " + rmax1 + "ms
|  Langsam            | " + rmin2 + "ms / " + rmax2 + "ms
|  Referenz (Schnell) | " + rmin3 + "ms / " + rmax3 + "ms
|  Schnell            | " + rmin4 + "ms / " + rmax4 + "ms
|-----------------------------------

Zur nächsten Seite mit <ENTER>

"

a1 <- ToInteger(Mean(accuracyReferenceSlow) * 10000) / 100
a2 <- ToInteger(Mean(accuracySlow) * 10000) / 100
a3 <- ToInteger(Mean(accuracyReferenceFast) * 10000) / 100
a4 <- ToInteger(Mean(accuracyFast) * 10000) / 100

aSD1 <- StdDev(responseReferenceSlow)
aSD2 <- StdDev(responseSlow)
aSD3 <- StdDev(responseReferenceFast)
aSD4 <- StdDev(responseFast)

accuracyErg <- "
Referenz (Langsam):  " + ToString(accuracyReferenceSlow) + "
Langsam:             " + ToString(accuracySlow) + "
Referenz (Schnell):  " + ToString(accuracyReferenceFast) + "
Schnell:             " + ToString(accuracyFast) + "
"

accuracyText <- "

Korrektheit der Antworten in Prozent
|---------------------------------------------------------
|  Durchlauf          | Durchschnitt / Standardabweichung
|---------------------------------------------------------
|  Referenz (Langsam) | " + a1 + "% / " + aSD1 + "
|  Langsam            | " + a2 + "% / " + aSD2 + "
|  Referenz (Schnell) | " + a3 + "% / " + aSD3 + "
|  Schnell            | " + a4 + "% / " + aSD4 + "
|---------------------------------------------------------

Zur nächsten Seite mit <ENTER>

"

resultFile <- FileOpenWrite("results/results_" + gSubNum + ".txt")

FilePrint(resultFile, responseErg + responseText + accuracyErg + accuracyText)

endText <- "Zum Beenden bitte <ESC> drücken!"

	textBox <- MakeTextBox(responseText, gFontResults, resultWidth, resultHeight)
	AddObject(bg, gWin)
	AddObject(textBox, gWin)
    Move(textBox, gWindowCenterX - resultWidth / 2, gWindowCenterY - resultHeight / 2)
	Draw()
	WaitForKeyPress("<return>")
	SetText(textBox, accuracyText)
	Draw()
	WaitForKeyPress("<return>")
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	label <- MakeLabel(endText, gFontWhiteBig)
	Move(label, gWindowCenterX, gWindowCenterY)
	AddObject(bg, gWin)
	AddObject(label, gWin)
	Draw()
}

# starts phase a -> see experiment plan
define PhaseA() {
	ShowReadyScreen()
	gResultReferenceSlow <- Main(gTimesToRepeatList, gListOfStimuli,gReferenceStimuli)
	ShowReadyScreen()
	PlayMusic("slow")
	gResultSlow <- Main(gTimesToRepeatList * 2, gListOfStimuli,gReferenceStimuli)
}

# starts phase a -> see experiment plan
define PhaseB() {
	ShowReadyScreen()
	gResultReferenceFast <- Main(gTimesToRepeatList, gListOfStimuli,gReferenceStimuli)
	ShowReadyScreen()
	PlayMusic("fast")
	gResultFast <- Main(gTimesToRepeatList * 2, gListOfStimuli,gReferenceStimuli)
}

define PlayMusic(speed) {
	if (speed == "fast") {
		PlayBackground(gSlowSound)
	} 
	if (speed == "slow") {
		PlayBackground(gFastSound)
	}
}

define Main(times, list, reference) {
	# draw reference symbol
	referencePosition <- gWindowCenterY - (gWindowCenterY * 0.75)
	label <- MakeLabel("Referenzsymbol:", gFontWhite)
	Move(label, gWindowCenterX, referencePosition - (gSymbolSize / 2) - gTextSize)
	square <- Square(gWindowCenterX, referencePosition, gSymbolSize, gColorRed, 1)
	AddObject(label, gWin)
	AddObject(square, gWin)

	# store results
	responseTime <- []
	accuracy <- []

	# create randomized list with repeated items
	stimuli <- Shuffle(RepeatList(list, times))
	
	loop(i, stimuli) {
		# draw
		AddObject(i, gWin)
		Draw()

		# calculate time
		start  <- GetTime()
		# wait gMaxWaitTime for response
		resp <- WaitForListKeyPressWithTimeout([gCORRECT_KEY], gMaxWaitTime, 1)
		end <- GetTime()

		# how long did it take?
		responseTime <- Append(responseTime, (end - start))
		
		# was reference hit?
		accuracy <- Append(accuracy, (IsSquare(i,reference) and IsRed(i.color,reference) and resp == gCORRECT_KEY))
		
		# delete current item from draw-call
		RemoveObject(i, gWin)
		Draw()
		Wait(gWaitTime)
	}
	return [responseTime, accuracy]
}

# is figure square
define IsSquare(item,reference) {
	return item.name == reference.name
}

# is color red?
define IsRed(color,reference) {
	refColor <- reference.color
	return color.red == refColor.red and color.green == refColor.green and color.blue == refColor.blue and color.alpha == refColor.alpha
}

# draws the intro
define DrawIntro() {
	introTextWidth <- gVideoWidth / 2
	introTextHeight <- gVideoHeight / 2
    
    introText <- "Willkommen!

Dies ist ein audiovisuelles Experiment.

- Drücke <Leertaste>, wenn das Symbol der Referenz gleicht


Zum Starten des Experiments drücke <ENTER>"

	text <- MakeTextBox(introText, gFontWhite, introTextWidth, introTextHeight)
	AddObject(text, gWin)
    Move(text, gWindowCenterX - introTextWidth / 2, gWindowCenterY - introTextHeight / 2)
	Draw()
}