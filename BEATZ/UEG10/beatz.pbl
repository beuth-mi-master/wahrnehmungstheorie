
define Start (params) {

	# globals
	gVideoWidth <- 1440
	gVideoHeight <- 900
	gWindowCenterX <- gVideoWidth/2
	gWindowCenterY <- gVideoHeight/2
	gSleepEasy <- 1

	#colors
	gColorRed <- MakeColor("red")
	gColorBlue <- MakeColor("blue")
	gColorGreen <- MakeColor("green")
	gColorWhite <- MakeColor("white")
	gColorBlack <- MakeColor("black")

	# text and fonts
	gTextSize <- 18
	gTextSizeBig <- 24
	gFontWhite <- MakeFont(gPEBLBaseFont, 1, gTextSize, gColorWhite, gColorBlack, 0)
	gFontWhiteBig <- MakeFont(gPEBLBaseFont, 1, gTextSizeBig, gColorWhite, gColorBlack, 0)
	gFontResults <- MakeFont("VeraMono.ttf", 1, gTextSize, gColorWhite, gColorBlack, 0)

	gReferencePosition <- gWindowCenterY - (gWindowCenterY * 0.75)

	# symbols and stimuli
	gSymbolSize <- 100
	gReferenceStimuli <- Square(gWindowCenterX, gReferencePosition, gSymbolSize, gColorRed, 1)
	gReferenceTestStimuli <- Circle(gWindowCenterX, gReferencePosition, gSymbolSize/2, gColorBlue, 1)

	gListOfStimuli <- [
		Circle(gWindowCenterX, gWindowCenterY, gSymbolSize/2, gColorRed, 1),
		Circle(gWindowCenterX, gWindowCenterY, gSymbolSize/2, gColorBlue, 1),
		Square(gWindowCenterX, gWindowCenterY, gSymbolSize, gColorGreen, 1),
		Square(gWindowCenterX, gWindowCenterY, gSymbolSize, gColorRed, 1),
		Rectangle(gWindowCenterX, gWindowCenterY, gSymbolSize, gSymbolSize/2, gColorBlue, 1),
		Ellipse(gWindowCenterX, gWindowCenterY, gSymbolSize/2,gSymbolSize, gColorBlue, 1)
	]

	gCORRECT_KEY <- " "

	gTestSound <- LoadSound("test.wav")
	gSlowSound <- LoadSound("slow.wav")
  	gFastSound <- LoadSound("fast.wav")

	gWaitTime <- 150
  	gMaxWaitTime <- 1000
  	gTimesToRepeatList <- 5

  	#####
  	# Main part of experiment
  	#####

    gWin <- MakeWindow("black")
	gSubNum <- GetSubNum(gWin)
	
    # draws intro
    DrawIntro()
    WaitForKeyPress("<return>")

	#test
	Test()
	ShowExperimentScreen()
	
	# main experiment
	DetermineGroup(RandomDiscrete(2))

	# quits the app
	ShowEndScreen()
	WaitForKeyPress("<esc>")
}

define Test() {
	ShowReadyScreen()
	PlayMusic("test")
	Main(gTimesToRepeatList, gListOfStimuli, gReferenceTestStimuli)
}

# randomize phases
define DetermineGroup(number) {
	if (number == 1) {
		PhaseA()
		PhaseB()
	} else {
		PhaseB()
		PhaseA()
	}
}

define ShowExperimentScreen(){
	Stop(gTestSound)
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	readyText <- "
Testlauf abgeschlossen.

- Wurde das Prinzip verstanden?
- War die Musik über die Kopfhörer hörbar?

Falls nicht, melde dich bitte beim Versuchsleiter.

Zum Fortfahren bitte <ENTER> drücken.
	"
	text <- MakeTextBox(readyText, gFontWhite, gVideoWidth/3, gVideoHeight/4)
	AddObject(bg, gWin)
	AddObject(text, gWin)
	Move(text, gWindowCenterX - (gVideoWidth/3) / 2, gWindowCenterY - (gVideoHeight/4) / 2)
	Draw()
	WaitForKeyPress("<return>")
}

# shows the screen before experiment phase starts
define ShowReadyScreen() {
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	label <- MakeLabel("Platziere eine Hand auf der <Leertaste> und starte mit drücken von <ENTER>", gFontWhiteBig)
	Move(label, gWindowCenterX, gWindowCenterY)
	AddObject(bg, gWin)
	AddObject(label, gWin)
	Draw()
	WaitForKeyPress("<return>")
}

# shows the endscreen
define ShowEndScreen() {
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	resultWidth <- gVideoWidth / 1.5
	resultHeight <- gVideoHeight / 1.2

	maxSize <- [
		Length(gResultReferenceSlow),
		Length(gResultSlow),
		Length(gResultReferenceFast),
		Length(gResultFast)
	]

	header <- "name;"
	i <- 1
  	while (i <= Max(maxSize)) {
  		header <- header + "v" + i + ";"
  		i <- i + 1
  	}
	header <- header + "FALSE;MEAN;STDEV;MIN;MAX"

	slowref <- "slowref;"
	slow <- "slow;"
	fastref <- "fastref;"
	fast <- "fast;"

	loop(item, Nth(gResultReferenceSlow, 1)) {
    	slowref <- slowref + item + ";"
  	}

  	loop(item, Nth(gResultSlow, 1)) {
    	slow <- slow + item + ";"
  	}

  	loop(item, Nth(gResultReferenceFast, 1)) {
    	fastref <- fastref + item + ";"
  	}

  	loop(item, Nth(gResultFast, 1)) {
    	fast <- fast + item + ";"
  	}


  	j <- 1
  	while (j < Length(gResultReferenceSlow)) {
  		slowref <- slowref + ";"
  		j <- j + 1
  	}

  	slowref <- slowref + Nth(gResultReferenceSlow, 2) + ";" + Mean(Nth(gResultReferenceSlow, 1)) + ";" + StdDev(Nth(gResultReferenceSlow, 1)) + ";" + Min(Nth(gResultReferenceSlow, 1)) + ";" + Max(Nth(gResultReferenceSlow, 1))
  	slow <- slow + Nth(gResultSlow, 2) + ";" + Mean(Nth(gResultSlow, 1)) + ";" + StdDev(Nth(gResultSlow, 1)) + ";" + Min(Nth(gResultSlow, 1)) + ";" + Max(Nth(gResultSlow, 1))

  	k <- 1
  	while (k < Length(gResultReferenceFast)) {
  		fastref <- fastref + ";"
  		k <- k + 1
  	}
  	fastref <- fastref + Nth(gResultReferenceFast, 2) + ";" + Mean(Nth(gResultReferenceFast, 1)) + ";" + StdDev(Nth(gResultReferenceFast, 1)) + ";" + Min(Nth(gResultReferenceFast, 1)) + ";" + Max(Nth(gResultReferenceFast, 1))
  	

  	fast <- fast + Nth(gResultFast, 2) + ";" + Mean(Nth(gResultFast, 1)) + ";" + StdDev(Nth(gResultFast, 1)) + ";" + Min(Nth(gResultFast, 1)) + ";" + Max(Nth(gResultFast, 1))


responseErg <- header + "
" + slowref + "
" + slow + "
" + fastref + "
" + fast

resultFile <- FileOpenWrite("results/results_" + gSubNum + ".csv")

FilePrint(resultFile, responseErg)

endText <- "Zum Beenden bitte <ESC> drücken!"
	bg <- Rectangle(gWindowCenterX, gWindowCenterY, gVideoWidth, gVideoHeight, gColorBlack, 1)
	label <- MakeLabel(endText, gFontWhiteBig)
	Move(label, gWindowCenterX, gWindowCenterY)
	AddObject(bg, gWin)
	AddObject(label, gWin)
	Draw()
}

# starts phase a -> see experiment plan
define PhaseA() {
	ShowReadyScreen()
	gResultReferenceSlow <- Main(gTimesToRepeatList, gListOfStimuli,gReferenceStimuli)
	ShowReadyScreen()
	PlayMusic("slow")
	gResultSlow <- Main(gTimesToRepeatList * 2, gListOfStimuli,gReferenceStimuli)
	Stop(gSlowSound)
}

# starts phase a -> see experiment plan
define PhaseB() {
	ShowReadyScreen()
	gResultReferenceFast <- Main(gTimesToRepeatList, gListOfStimuli,gReferenceStimuli)
	ShowReadyScreen()
	PlayMusic("fast")
	gResultFast <- Main(gTimesToRepeatList * 2, gListOfStimuli,gReferenceStimuli)
	Stop(gFastSound)
}

define PlayMusic(speed) {
	if (speed == "fast") {
		PlayBackground(gSlowSound)
	} 
	if (speed == "slow") {
		PlayBackground(gFastSound)
	}
	if (speed == "test") {
		PlayBackground(gTestSound)
	} 
}

define Main(times, list, reference) {
	# draw reference symbol
	label <- MakeLabel("Referenzsymbol:", gFontWhite)
	Move(label, gWindowCenterX, gReferencePosition - (gSymbolSize / 2) - gTextSize)
	ref <- reference
	AddObject(label, gWin)
	AddObject(ref, gWin)

	# store results
	responseTime <- []
	wrong <- 0

	# create randomized list with repeated items
	stimuli <- Shuffle(RepeatList(list, times))

	loop(i, stimuli) {
		# draw
		AddObject(i, gWin)
		Draw()

		# calculate time
		start  <- GetTime()
		# wait gMaxWaitTime for response
		resp <- WaitForListKeyPressWithTimeout([gCORRECT_KEY], gMaxWaitTime, 1)
		end <- GetTime()

		# how long did it take?
		if (IsForm(i,reference) and IsRed(i.color,reference) and resp == gCORRECT_KEY) {
			responseTime <- Append(responseTime, (end - start))
		} else {
			wrong <- wrong + 1
		}
		
		# delete current item from draw-call
		RemoveObject(i, gWin)
		Draw()
		Wait(gWaitTime)
	}
	return [responseTime, wrong]
}

# is figure defined form
define IsForm(item,reference) {
	return item.name == reference.name
}

# is color red?
define IsRed(color,reference) {
	refColor <- reference.color
	return color.red == refColor.red and color.green == refColor.green and color.blue == refColor.blue and color.alpha == refColor.alpha
}

# draws the intro
define DrawIntro() {
	introTextWidth <- gVideoWidth / 2
	introTextHeight <- gVideoHeight / 2
    
    introText <- "Willkommen!

Dies ist ein audiovisuelles Experiment.

Schritt 1: Bitte setze die Kopfhörer auf
Schritt 2: Testlauf
Schritt 3: Experiment

Erklärung:
Im oberen Teil des Bildschirms wird ein Referenzsymbol erscheinen.
Drücke die <Leertaste>, sobald das Symbol in der Mitte dem Referenzsymbol entspricht.

Zum Starten des Testlaufs drücke <ENTER>"

	text <- MakeTextBox(introText, gFontWhite, introTextWidth, introTextHeight)
	AddObject(text, gWin)
    Move(text, gWindowCenterX - introTextWidth / 2, gWindowCenterY - introTextHeight / 2)
	Draw()
}